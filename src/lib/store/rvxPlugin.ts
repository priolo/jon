import { Store, WatchCallback } from "./global"


interface Listener {
	store: Store,
	actionName: string,
	callback: WatchCallback,
}


/**
 * Types of events generated by a WATCH of a STORE
 */
export enum EVENTS_TYPES {
	ACTION = "action",
	ACTION_SYNC = "action-sync",
	MUTATION = "mutation",
}

/**
 * the registered GROUP of callback
 */
const listeners: Map<Store, { [name: string]: Set<WatchCallback> }> = new Map()


/**
 * Deliver the event to all registered LISTENERS
 * @param key name of actionmutation
 * @param payload of action/mutator
 */
export function pluginEmit(type: EVENTS_TYPES, store: Store, key: string, payload: any, result: any, subcall: boolean) {

	const msg = { type, store, key, payload, result, subcall }

	if (!listeners.has(store)) return

	const storeActions = listeners.get(store)
	if (!storeActions) return

	const callbacksStoreJolly = storeActions["*"]
	if (callbacksStoreJolly) {
		for (const callback of callbacksStoreJolly) callback(msg)
	}

	// get all callbacks for the store and execute them
	const callbacks = storeActions[key]
	if (!callbacks) return
	for (const callback of callbacks) callback(msg)
}


/**
 * Inserts a listener into JON
 */
export function addWatch({ store, actionName, callback }: Listener) {

	let storeActions

	// get or create storeActions
	if (!listeners.has(store)) {
		storeActions = {}
		listeners.set(store, storeActions)
	} else {
		storeActions = listeners.get(store)
	}

	// get or create action
	let callbacks = storeActions[actionName]
	if (!callbacks) {
		callbacks = new Set()
		storeActions[actionName] = callbacks
	}

	callbacks.add(callback)
}

/**
 * removes a listener from JON
 */
export function removeWatch({ store, actionName, callback }: Listener): void {

	// if exist get storeActions
	if (!listeners.has(store)) return
	const storeActions = listeners.get(store)
	if (!storeActions) return

	// delete callback from storeActions
	const callbacks = storeActions[actionName]
	if (callbacks) callbacks.delete(callback)

	// if there are no more callbacks for the store, delete the storeActions
	if (!callbacks || callbacks.size === 0) {
		delete storeActions[actionName]
	}
	if (Object.keys(storeActions).length === 0) {
		listeners.delete(store)
	}
}